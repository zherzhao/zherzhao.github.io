<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zherzhao.github.io</id>
    <title>ZHAO</title>
    <updated>2019-09-23T09:15:40.928Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zherzhao.github.io"/>
    <link rel="self" href="https://zherzhao.github.io/atom.xml"/>
    <subtitle>My Notes</subtitle>
    <logo>https://zherzhao.github.io/images/avatar.png</logo>
    <icon>https://zherzhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, ZHAO</rights>
    <entry>
        <title type="html"><![CDATA[Linux命令]]></title>
        <id>https://zherzhao.github.io/post/pZitpRs14</id>
        <link href="https://zherzhao.github.io/post/pZitpRs14">
        </link>
        <updated>2019-09-19T08:31:31.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>查看系统<br>
arch  显示机器的处理器架构<br>
uname -m 显示机器的处理器架构<br>
uname -r 显示正在使用的内核版本<br>
cat /proc/meminfo 校验内存使用<br>
cat /proc/swaps 显示哪些swap被使用<br>
cat /proc/version 显示内核的版本<br>
cat /proc/net/dev 显示网络适配器及统计<br>
cat /proc/mounts 显示已加载的文件系统<br>
cat /proc/loadavg 查看系统负载磁盘和分区<br>
cat /etc/redhat-release 查看redhat发行版<br>
swapon -s  查看所有交换分区<br>
w 查看活动用户<br>
lscpu 显示CPU信息<br>
lsmem<br>
ps -eo %mem,%cpu,ucmd<br>
vmstat  显示虚拟内存状态<br>
free 显示内存和交换区状态<br>
grep MemTotal /proc/meminfo  查看内存总量<br>
grep MemFree /proc/meminfo  查看空闲内存量<br>
lsipc  显示IPC信息<br>
lsmod 显示加载的内核模块<br>
df  显示分区挂载信息<br>
du -sh dir1 估算目录已经使用的磁盘空间<br>
env  查看环境变量<br>
uptime 显示系统运行时间、用户数、负载<br>
cut -d: -f1 /etc/passwd  查看系统所有用户</p>
</li>
<li>
<p>awk by example<br>
https://developer.ibm.com/tutorials/l-awk1/</p>
</li>
</ul>
<p>基本语法</p>
<pre><code>awk '{pattern + action}' 或者 awk 'pattern {action}'	
</code></pre>
<pre><code>awk ‑F&quot;:&quot; '{ print $1 }' /etc/passwd
awk '/root/' /etc/passwd
</code></pre>
<p>emp.data:</p>
<pre><code>Beth 	4.00 	0
Dan 	3.75 	0
kathy 	4.00 	10
Mark 	5.00 	20
Mary 	5.50 	22
Susie 	4.25 	18
</code></pre>
<pre><code>awk '$3 &gt;0 { print $1, $2 * $3 }' emp.data
awk '{ printf(&quot;%-8s $%6.2f\n&quot;, $1, $2 * $3) }' emp.data
awk '{ printf(&quot;%6.2f    %s\n&quot;, $2 * $3, $0) }' emp.data | sort
</code></pre>
<p>模式</p>
<pre><code>$2 &gt;= 4 || $3 &gt;= 20
NF, 字段数量
$NF, 最后一个字段
NR, 当前行号
</code></pre>
<p>数据验证</p>
<pre><code>NF != 3     { print $0, &quot;number of fields is not equal to 3&quot; }
$2 &lt; 3.35   { print $0, &quot;rate is below minimum wage&quot; }
$2 &gt; 10     { print $0, &quot;rate exceeds $10 per hour&quot; }
$3 &lt; 0      { print $0, &quot;negative hours worked&quot; }
$3 &gt; 60     { print $0, &quot;too many hours worked&quot; }
</code></pre>
<p>BEGIN<br>
BEGIN 用于匹配第一个输入文件的第一行之前的位置， END 则用于匹配处理过的最后一个文件的最后一行之后的位置。</p>
<pre><code>	BEGIN { print &quot;Name    RATE    HOURS&quot;; print &quot;&quot;}
      { print }
</code></pre>
<p>END</p>
<pre><code>$3 &gt; 15 { emp = emp + 1 }
END     { print emp, &quot;employees worked more than 15 hours&quot; }
	
END { print NR, &quot;employees&quot; }
	
	    { pay = pay + $2 * $3 }
END { print NR, &quot;employees&quot;
      print &quot;total pay is&quot;, pay
      print &quot;average pay is&quot;, pay/NR
    }
</code></pre>
<p>打印最后一个输入行</p>
<pre><code>	{ last = $0 }

END { print last }
</code></pre>
<p>内置函数</p>
<pre><code>gsub(r,s) 在整个$0中用s代替r
gsub(r,s,t) 在整个t中用s替代r
index(s,t) 返回s中字符串t的第一位置
length(s) 返回s长度
match(s,r) 测试s是否包含匹配r的字符串
split(s,a,fs) 在fs上将s分成序列a
sprint(fmt,exp) 返回经fmt格式化后的exp
sub(r,s) 用$0中最左边最长的子串代替s
substr(s,p) 返回字符串s中从p开始的后缀部分
substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分
	{ print $1, length($1) }
</code></pre>
<p>行、单词以及字符的计数</p>
<pre><code>{ nc = nc + length($0) + 1
      nw = nw + NF
}
END { print NR, &quot;lines,&quot;, nw, &quot;words,&quot;, nc, &quot;characters&quot; }
</code></pre>
<p>if-else语句</p>
<pre><code>$2 &gt; 6 { n = n + 1; pay = pay + $2 * $3 }
END    { if (n &gt; 0)
            print n, &quot;employees, total pay is&quot;, pay,
                     &quot;average pay is&quot;, pay/n
         else
             print &quot;no employees are paid more than $6/hour&quot;
        }
</code></pre>
<p>while语句</p>
<pre><code># interest1 - 计算复利
#   输入: 钱数    利率    年数
#   输出: 复利值

{   i = 1
    while (i &lt;= $3) {
        printf(&quot;\t%.2f\n&quot;, $1 * (1 + $2) ^ i)
        i = i + 1
    }
}
</code></pre>
<p>for语句</p>
<pre><code># interest1 - 计算复利
#   输入: 钱数    利率    年数
#   输出: 每年末的复利

{ for (i = 1; i &lt;= $3; i = i + 1)
    printf(&quot;\t%.2f\n&quot;, $1 * (1 + $2) ^ i)
}
</code></pre>
<p>数组</p>
<pre><code># 反转 - 按行逆序打印输入

{ line[NR] = $0 }  # 记下每个输入行

END { i = NR           # 逆序打印
      while (i &gt; 0) {
        print line[i]
        i = i - 1
      }
}
</code></pre>
<pre><code># 反转 - 按行逆序打印输入，for语句实现

{ line[NR] = $0 }   # 记下每个输入行

END { for (i = NR; i &gt; 0; i = i - 1)
        print line[i]
}
</code></pre>
<p>算数函数</p>
<pre><code>awk 'BEGIN {  PI = 3.14159265;  param = 30.0;  result = sin(param * PI /180);  printf(&quot;the sine of %.2f degrees is %.2f.\n&quot;, param, result)}'	
</code></pre>
<pre><code>awk 'BEGIN {
  print &quot;Random num1 =&quot; , rand()
  print &quot;Random num2 =&quot; , rand()
  print &quot;Random num3 =&quot; , rand()
}'	
</code></pre>
<p>统计字段出现次数</p>
<pre><code>awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}'	file
</code></pre>
<ul>
<li>改变centos目录颜色(1)<br>
在~/.bash_profile文件中添加LS_COLORS</li>
</ul>
<pre><code>export LS_COLORS='no=00:fi=00:di=01;33:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;35:*.cmd=01;35:*.exe=01;35:*.com=01;35:*.btm=01;35:*.bat=01;35:*.sh=01;35:*.csh=01;35:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'
source ~/.bash_profile
</code></pre>
<ul>
<li>改变centos目录颜色(2)</li>
</ul>
<pre><code>cp /etc/DIR_COLORS ~/.dir_colors
DIR 01;34 改为DIR 01;35
</code></pre>
<ul>
<li>效果代码
<ul>
<li>效果列表：<br>
00 　　　　默认<br>
01 　　　　加粗<br>
04 　　　　下划线<br>
05 　　　　闪烁<br>
07 　　　　反显<br>
08 　　　　隐藏</li>
<li>颜色列表：<br>
31～37　　　　分别表示前景色为红、绿、橙、蓝、紫、青、灰<br>
90～97　　　　分别表示前景色为深灰、淡红、淡绿、黄色、淡蓝、淡紫、青绿、白色<br>
40～47　　　　分别表示背景色为黑、红、绿、橙、蓝、紫、青、灰<br>
100～106　　　分别表示背景色为深灰、淡红、淡绿、黄色、淡蓝、淡紫、青绿</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多媒体资源]]></title>
        <id>https://zherzhao.github.io/post/lTRwyrnuD</id>
        <link href="https://zherzhao.github.io/post/lTRwyrnuD">
        </link>
        <updated>2019-09-18T08:33:16.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>Sound Effects.<p><br>
These 16,000 BBC Sound Effects are made available by the BBC in WAV format to download for use under the terms of the RemArc Licence. <p><br>
http://bbcsfx.acropolis.org.uk/</p>
</li>
<li>
<p>Browse All Plants<p><br>
Shown here are the 160 illustrations drawn by Elizabeth Twining from her two-volume catalog depicting the natural orders of plants. <p><br>
https://www.c82.net/twining/plants/</p>
</li>
<li>
<p>Mathcha.io<p><br>
Online Mathematics Editor<p><br>
https://www.mathcha.io/</p>
</li>
<li>
<p>AsciiMath<p><br>
AsciiMath is an easy-to-write markup language for mathematics.<p><br>
http://asciimath.org/<p><br>
https://www.mathjax.org/</p>
</li>
<li>
<p>Algorithm Visualizer<p><br>
Algorithm Visualizer is an interactive online platform that visualizes algorithms from code.<p><br>
https://algorithm-visualizer.org/</p>
</li>
<li>
<p>TikZ examples<p><br>
http://www.texample.net/</p>
</li>
<li>
<p>Generative Adversarial Networks<p><br>
https://blog.floydhub.com/gans-story-so-far/</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github资源]]></title>
        <id>https://zherzhao.github.io/post/iBXlakzPj</id>
        <link href="https://zherzhao.github.io/post/iBXlakzPj">
        </link>
        <updated>2019-09-18T08:10:41.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>gredea, A static blog writing client</p>
<p>https://gridea.dev/</p>
<p>https://github.com/getgridea/gridea</p>
</li>
<li>
<p>Flow, Computational framework for reinforcement learning in traffic control</p>
<p>https://github.com/flow-project/flow</p>
</li>
<li>
<p>TF-rex, Play Google Chrome's T-rex game with TensorFlow<br>
https://github.com/vdutor/TF-rex</p>
</li>
<li>
<p>TensorKart, self-driving MarioKart with TensorFlow<br>
https://github.com/kevinhughes27/TensorKart</p>
</li>
<li>
<p>mupen64plus-input-bot, An input driver for mupen64plus that consumes from a python web server<br>
https://github.com/kevinhughes27/mupen64plus-input-bot</p>
</li>
<li>
<p>FlutterDouBan, Flutter豆瓣客户端<br>
https://github.com/kaina404/FlutterDouBan</p>
</li>
<li>
<p>goldendict, A feature-rich dictionary lookup program<br>
https://github.com/goldendict/goldendict</p>
</li>
<li>
<p>Pock, Display macOS Dock in Touch Bar<br>
https://github.com/pigigaldi/Pock</p>
</li>
<li>
<p>minecraft-bedrock, a bedrock minecraft PE Server on docker<br>
https://github.com/LomotHo/minecraft-bedrock</p>
</li>
<li>
<p>minecraft-server, Minecraft server with select-able version<br>
https://hub.docker.com/r/itzg/minecraft-server/</p>
</li>
<li>
<p>video-object-removal, Just draw a bounding box and you can remove the object you want to remove.<br>
https://github.com/zllrunning/video-object-removal</p>
</li>
<li>
<p>civitas, Civitas is an empire-building game written in Javascript with the help of the jQuery library.<br>
https://github.com/sizeofcat/civitas</p>
</li>
<li>
<p>convolutional-pose-machines-tensorflow, This is the Tensorflow implementation of Convolutional Pose Machines, one of the state-of-the-art models for 2D body and hand pose estimation.<br>
https://github.com/timctho/convolutional-pose-machines-tensorflow</p>
</li>
<li>
<p>ml-agents, Unity Machine Learning Agents Toolkit<br>
https://github.com/Unity-Technologies/ml-agents</p>
</li>
<li>
<p>TFClassify-Unity, An example of using Tensorflow with Unity for image classification and object detection.<br>
https://github.com/Syn-McJ/TFClassify-Unity</p>
</li>
<li>
<p>invadersapp, Create a simple cross-platform desktop Space Invaders game with Go<br>
https://github.com/sausheong/invadersapp</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker资源]]></title>
        <id>https://zherzhao.github.io/post/Fo_6RaqY3</id>
        <link href="https://zherzhao.github.io/post/Fo_6RaqY3">
        </link>
        <updated>2019-09-18T08:09:12.000Z</updated>
        <content type="html"><![CDATA[<p>amaksimov/python_data_science</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebook简介]]></title>
        <id>https://zherzhao.github.io/post/S7SfSeqlO</id>
        <link href="https://zherzhao.github.io/post/S7SfSeqlO">
        </link>
        <updated>2019-08-30T06:06:07.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.dataquest.io/blog/jupyter-notebook-tutorial/">link</a><br>
A notebook integrates <strong>code</strong> and its <strong>output</strong> into a single document that combines visualizations, narrative text, mathematical equations, and other rich media.<br>
Best of all, as part of the open source <a href="https://jupyter.org/">Project Jupyter</a>, they are completely free.<br>
The Jupyter project is the successor to the earlier <strong>IPython Notebook</strong>, which was first published as a prototype in 2010.</p>
<p>There are two main <strong>cell</strong> types that we will cover:</p>
<ul>
<li>A <strong>code</strong> cell contains code to be executed in the kernel and displays its output below.</li>
<li>A <strong>Markdown</strong> cell contains text formatted using Markdown and displays its output in-place when it is run.<br>
When you ran the cell, its output will have been displayed below and the label to its left will have changed from In [ ] to In [1].</li>
</ul>
<pre><code>import time
time.sleep(3)
</code></pre>
<p>This cell doesn't produce any output, but it does take three seconds to execute. Notice how Jupyter signifies that the cell is currently running by changing its label to In [*].</p>
<h2 id="keyboard-shortcuts">Keyboard Shortcuts</h2>
<p>One final thing you may have observed when running your cells is that their border turned <strong>blue</strong>, whereas it was <strong>green</strong> while you were editing. There is always one &quot;active&quot; cell highlighted with a border whose color denotes its current mode, where <em>green means &quot;edit mode&quot;</em> and <em>blue is &quot;command mode.&quot;</em></p>
<ul>
<li><code>Ctrl + Enter</code> run a cell.</li>
<li>Toggle between edit and command mode with Esc and Enter, respectively.</li>
<li>Once in command mode:</li>
<li>Scroll up and down your cells with your Up and Down keys.</li>
<li>Press A or B to insert a new cell above or below the active cell.</li>
<li>M will transform the active cell to a Markdown cell.</li>
<li>Y will set the active cell to a code cell.</li>
<li>D + D (D twice) will delete the active cell.</li>
<li>Z will undo cell deletion.</li>
<li>Hold Shift and press Up or Down to select multiple cells at once.</li>
<li>With multiple cells selected, Shift + M will merge your selection.</li>
<li>Ctrl + Shift + -, in edit mode, will split the active cell at the cursor.</li>
<li>You can also click and Shift + Click in the margin to the left of your cells to select them.</li>
</ul>
<h2 id="markdown">Markdown</h2>
<p>Markdown is a lightweight, easy to learn markup language for formatting plain text.<br>
Let’s cover the basics with a quick example.</p>
<pre><code># This is a level 1 heading
## This is a level 2 heading
This is some plain text that forms a paragraph.
Add emphasis via **bold** and __bold__, or *italic* and _italic_.
Paragraphs must be separated by an empty line.
* Sometimes we want to include lists.
* Which can be indented.
1. Lists can also be numbered.
2. For ordered lists.
[It is possible to include hyperlinks](https://www.example.com)
Inline code uses single backticks: `foo()`, and code blocks use triple backticks:
```
bar()
```
Or can be indented by 4 spaces:
    foo()
And finally, adding images is easy: ![Alt text](https://www.example.com/image.jpg)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在docker中安装Python3（Ubuntu环境）]]></title>
        <id>https://zherzhao.github.io/post/Wriv0Wtpq</id>
        <link href="https://zherzhao.github.io/post/Wriv0Wtpq">
        </link>
        <updated>2019-08-19T07:55:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="替换国内apt源">替换国内apt源</h1>
<p>在清华开源软件镜像站下载对应的配置文件，Ubuntu的配置文件为/etc/apt/sources.list<br>
https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/<br>
替换list文件后更新源</p>
<pre><code>#apt-get update
</code></pre>
<h1 id="安装需要的软件">安装需要的软件</h1>
<pre><code>安装工具
#apt-get install gcc make
安装依赖包
#apt-get install zlib* bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel tcl-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-dev
安装libressl
# wget https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.9.0.tar.gz

安装Python
# wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows编程使用运行时库应忽略的库]]></title>
        <id>https://zherzhao.github.io/post/windows-bian-cheng-shi-yong-yun-xing-shi-ku-ying-hu-lue-de-ku</id>
        <link href="https://zherzhao.github.io/post/windows-bian-cheng-shi-yong-yun-xing-shi-ku-ying-hu-lue-de-ku">
        </link>
        <updated>2019-06-25T11:33:17.000Z</updated>
        <content type="html"><![CDATA[<p>下表显示根据要使用的运行时库应忽略的库。<br>
若要使用第一行运行时库    请忽略第2行的这些库</p>
<p>单线程 (libc.lib)</p>
<p>libcmt.lib;msvcrt.lib;libcd.lib;libcmtd.lib;msvcrtd.lib;</p>
<p>多线程 (libcmt.lib) (/MT)</p>
<p>libc.lib;msvcrt.lib;libcd.lib;libcmtd.lib;msvcrtd.lib;</p>
<p>使用 DLL 的多线程 (msvcrt.lib) (/MD)</p>
<p>libc.lib;libcmt.lib;libcd.lib;libcmtd.lib;msvcrtd.lib;</p>
<p>调试单线程 (libcd.lib)</p>
<p>libc.lib;libcmt.lib;msvcrt.lib;libcmtd.lib;msvcrtd.lib;</p>
<p>调试多线程 (libcmtd.lib) (/MTd)</p>
<p>libc.lib;libcmt.lib;msvcrt.lib;libcd.lib;msvcrtd.lib;</p>
<p>使用 DLL 的调试多线程 (msvcrtd.lib) (/MDd)</p>
<p>libc.lib;libcmt.lib;msvcrt.lib;libcd.lib;libcmtd.lib;</p>
<h2 id="查看库文件属性">查看库文件属性</h2>
<p>dumpbin<br>
查看dllfile.dll文件的导出信息</p>
<pre><code>&gt;dumpbin /exports dllShareMem.dll
Microsoft (R) COFF/PE Dumper Version 14.22.27905.0
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file dllShareMem.dll

File Type: DLL

  Section contains the following exports for dllShareMem.dll

    00000000 characteristics
    5D6F61BB time date stamp Wed Sep  4 15:03:23 2019
        0.00 version
           1 ordinal base
           5 number of functions
           5 number of names

    ordinal hint RVA      name

          1    0 000110EB ?init@@YA_NPB_WI_N@Z = @ILT+230(?init@@YA_NPB_WI_N@Z)
          2    1 00011032 ?link@@YA_NXZ = @ILT+45(?link@@YA_NXZ)
          3    2 0001110E ?read@@YAIPAEI@Z = @ILT+265(?read@@YAIPAEI@Z)
          4    3 00011122 ?reset@@YA_NXZ = @ILT+285(?reset@@YA_NXZ)
          5    4 00011028 ?write@@YAIPBEI@Z = @ILT+35(?write@@YAIPBEI@Z)

  Summary

        1000 .data
        1000 .idata
        2000 .rdata
        1000 .reloc
        1000 .rsrc
        6000 .text
       10000 .textbss
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zherzhao.github.io/post/hello-gridea</id>
        <link href="https://zherzhao.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>欢迎使用 Gridea！<br>
Gridea 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意...</p>
]]></summary>
        <content type="html"><![CDATA[<p>欢迎使用 Gridea！<br>
Gridea 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意...</p>
<!-- more -->
<h3 id="特性">特性👇</h3>
<p>你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>你可以对文章进行标签分组</p>
<p>你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<h3 id="资源">资源</h3>
<p><a href="https://github.com/getgridea/gridea">Github</a></p>
<p><a href="http://hvenotes.fehey.com/">Gridea 主页</a></p>
<p><a href="http://fehey.com/">示例网站</a></p>
<p><a href="https://gridea.dev/themes/">网站主题</a></p>
<h3 id="符号">符号</h3>
<p>👏📝🌉 🌱😘<br>
🌁💬🌎 💻📋</p>
]]></content>
    </entry>
</feed>